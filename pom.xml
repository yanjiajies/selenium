<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>TestNG</groupId>
	<artifactId>TestNG</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>TestNG</name>
	<url>http://maven.apache.org</url>

    <!-- maven 参数配置，这里引用不同的testng.xml -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <xmlFileName>testNG.xml</xmlFileName>
		<file.encoding>UTF-8</file.encoding>
		<spring.version>4.2.6.RELEASE</spring.version>
		<aspectj.version>1.8.10</aspectj.version>
    </properties>
    
    
    
	<dependencies>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>3.14.0</version>
		</dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>3.14.0</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>

		<!-- 依赖testNg -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.9.9</version>
		</dependency>

		<!-- extentreports报告-->
		<dependency>
			<groupId>com.relevantcodes</groupId>
			<artifactId>extentreports</artifactId>
			<version>2.41.1</version>
		</dependency>
		<dependency>
			<groupId>com.vimalselvam</groupId>
			<artifactId>testng-extentsreport</artifactId>
			<version>1.2.0</version>
		</dependency>
		<dependency>
			<groupId>com.aventstack</groupId>
			<artifactId>extentreports</artifactId>
			<version>3.1.5</version>
		</dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.9.6</version>
		</dependency>

 		<dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>4.0-beta5</version>
        </dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-firefox-driver</artifactId>
			<version>3.14.0</version>
		</dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-chrome-driver</artifactId>
			<version>3.14.0</version>
		</dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-ie-driver</artifactId>
			<version>3.14.0</version>
		</dependency>
        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>RELEASE</version>
            <scope>compile</scope>
        </dependency>

		<dependency>
			<groupId>de.openkeyword</groupId>
			<artifactId>autoit</artifactId>
			<version>0.1.17</version>
		</dependency>
		<dependency>
			<groupId>io.appium</groupId>
			<artifactId>java-client</artifactId>
			<version>5.0.0-BETA9</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.appium</groupId>
			<artifactId>java-client</artifactId>
			<version>RELEASE</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-api</artifactId>
			<version>3.14.0</version>
		</dependency>
		<!--MyBatis.xml 核心JAR-->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.2</version>
		</dependency>
		<!--数据库相关-->
		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.2.2</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>4.2.1</version>
		</dependency>
		<!--spring-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>net.sourceforge.tess4j</groupId>
			<artifactId>tess4j</artifactId>
			<version>3.3.1</version>
			<exclusions>
				<exclusion>
					<groupId>com.sun.jna</groupId>
					<artifactId>jna</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>4.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>4.0.0</version>
		</dependency>
		<dependency >
		<groupId >com.sun.mail </groupId >
		<artifactId >javax.mail</artifactId >
		<version >1.6.0 </version >
	</dependency >
		<!-- Allure-->
		<dependency>
			<groupId>io.qameta.allure</groupId>
			<artifactId>allure-testng</artifactId>
			<version>2.10.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectj.version}</version>
		</dependency>
		<dependency>
			<groupId>io.qameta.allure</groupId>
			<artifactId>allure-java-commons</artifactId>
			<version>RELEASE</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>



	 <build>
        <plugins>
			<!-- Allure配置-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.10</version>
				<configuration>
					<!--设置参数命令行-->
					<argLine>
						-javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
					</argLine>
					<systemPropertyVariables>
						<!--是否忽略html，解释见下图。与之后在reportNg报告上显示截图相关。当前已经使用allure了，这里可以直接去掉啦-->
						<org.uncommons.reportng.escape-output>false</org.uncommons.reportng.escape-output>
					</systemPropertyVariables>
					<!--测试失败后，是否忽略并继续测试-->
					<testFailureIgnore>true</testFailureIgnore>
					<argLine>
						-Dfile.encoding=UTF-8
					</argLine>

					<suiteXmlFiles>
						<!--代表的是要执行的测试套件名称-->
						<suiteXmlFile>res/testNG.xml</suiteXmlFile>
					</suiteXmlFiles>

				</configuration>


			</plugin>

       	   <!-- 添加插件 关联testNg.xml  ，surefire插件其实就是一个容器-->
           <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version>
                <configuration>
                <!-- 有疑问 ，加上这段代码就没有多余的report文件了-->
                <!-- 添加插件,添加ReportNg的监听器，生成TestNg的报告 -->
                	 <!--<properties>-->
                        <!--<property>-->
                            <!--<name>usedefaultlisteners</name>-->
                            <!--<value>false</value>-->
                        <!--</property>-->
                        <!--<property>-->
                            <!--<name>listener</name>-->
                            <!--<value>org.uncommons.reportng.HTMLReporter</value>-->
                        <!--</property>-->
                    <!--</properties>-->
                    <suiteXmlFiles>
                        <suiteXmlFile>res/testNG.xml</suiteXmlFile>
                    </suiteXmlFiles>
					<!--定义Testng输入输出文档的对应目录-->
					<!--<workingDirectory>res/</workingDirectory>-->
					<forkMode>once</forkMode>
					<argLine>-Dfile.encoding=UTF-8</argLine>
					<testFailureIgnore>true</testFailureIgnore>
                </configuration>
            </plugin>
			<!--配置-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.1.1</version>
				<executions>
					<execution>
						<phase>test</phase>
						<goals>
							<goal>java</goal>
						</goals>
						<configuration>
							<includePluginDependencies>true</includePluginDependencies>
							<mainClass>com.zd.mail.MailDemo</mainClass>
							<arguments>
								<argument>11</argument>
								<argument>22</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>


 <!--

  这里要将defaultListener设置为false，下面配置了两个listener，一个是HTMLReport，用来生成HTML格式的Report，
 另一个是JUnitXMLReporter，这个是用来生成xml格式的report，用于jekins服务器;practice11.xml即为即将运行的TestNG xml。
然后运行maven test，生成的报告会在target/目录下。
有了报告以后，我们会想，能不能在case执行的过程中将一些重要的log信息也输出到report中呢?
testNG中有这样一个类：Reporter，就是专门做这个工作的。
@PoiUtile
    public void test1(){
        Reporter.log("This is test1");
    }
这样生成的报告就既美观又实用了。
除了ReportNG外，我们还可以使用testNG-xslt

 -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
